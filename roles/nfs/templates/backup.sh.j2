#!/bin/bash

# Variables
BACKUP_SOURCE="/srv/nfs4/data/kube"
BACKUP_DEST="/tmp/kube_backup_$(date +'%Y%m%d_%H%M%S').tar.gz"
MINIO_ALIAS="minio" # The alias name you configured in mc
MINIO_BUCKET="kubernetes" # Replace with your MinIO bucket name
MINIO_API="{{ MINIO1_API_SUB_DOMAIN }}.{{ DOMAIN_ADDR }}"
MINIO_PATH="${MINIO_API}/${MINIO_BUCKET}/"
ACCESS_KEY="{{ MINIO_ACCESS_KEY }}"
SECRET_KEY="{{ MINIO_SECRET_KEY }}"

# Function to set an alias for MinIO
set_minio_alias() {
  local alias_name=$1
  local url=$2
  local access_key=$3
  local secret_key=$4

  echo "Setting alias for $alias_name..."
  mc alias set "$alias_name" "$url" "$access_key" "$secret_key"
  check_command "Alias set for $alias_name"
}

set_minio_alias $MINIO_ALIAS "https://$MINIO_API" "$ACCESS_KEY" "$SECRET_KEY"

# Step 1: Create a tarball of the directory
echo "Creating backup of ${BACKUP_SOURCE}..."
tar -czf ${BACKUP_DEST} -C /srv/nfs4/data kube

# Check if tar command was successful
if [ $? -ne 0 ]; then
    echo "Error: Failed to create the backup."
    exit 1
fi

echo "Backup created at ${BACKUP_DEST}"

# Step 2: Upload the backup to MinIO using mc
echo "Uploading backup to MinIO (${MINIO_API})..."
mc cp ${BACKUP_DEST} ${MINIO_ALIAS}/${MINIO_BUCKET}/

# Check if mc command was successful
if [ $? -ne 0 ]; then
    echo "Error: Failed to upload the backup to MinIO."
    exit 1
fi

echo "Backup successfully uploaded to MinIO."

# Step 3: Clean up the local backup file
echo "Cleaning up local backup..."
rm -f ${BACKUP_DEST}

# Final message
echo "Backup process completed successfully."
